/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @class
 * Class representing MSALAuthenticationProvider
 * @extends AuthenticationProvider
 */
export class MSALAuthenticationProvider {
    /**
     * @public
     * @constructor
     * Creates an instance of MSALAuthenticationProvider
     * @param {string | any} clientIdOrUserAgentApplication - The clientId value of an application or an instance of UserAgentApplication
     * @param {string[]} scopes - An array of graph scopes
     * @param {any} [options] - An options object for MSAL initialization
     * @returns An instance of MSALAuthenticationProvider
     */
    constructor(clientIdOrUserAgentApplication, scopes, options) {
        const callback = (errorDesc, token, error, tokenType) => {
            // tslint:disable-line: no-empty
        };
        this.scopes = scopes;
        this.userAgentApplication = typeof clientIdOrUserAgentApplication === "string" ? new Msal.UserAgentApplication(clientIdOrUserAgentApplication, undefined, callback, options) : clientIdOrUserAgentApplication;
    }
    /**
     * @public
     * @async
     * To get the access token
     * @param {AuthenticationProviderOptions} authenticationProviderOptions - The authentication provider options object
     * @returns The promise that resolves to an access token
     */
    getAccessToken(authenticationProviderOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = authenticationProviderOptions;
            let scopes;
            if (typeof options !== "undefined") {
                scopes = options.scopes;
            }
            if (typeof scopes === "undefined" || scopes.length === 0) {
                scopes = this.scopes;
            }
            if (scopes.length === 0) {
                const error = new Error();
                error.name = "EmptyScopes";
                error.message = "Scopes cannot be empty, Please provide a scope";
                throw error;
            }
            try {
                const accessToken = yield this.userAgentApplication.acquireTokenSilent(scopes);
                return accessToken;
            }
            catch (errorMsg) {
                try {
                    const idToken = yield this.userAgentApplication.loginPopup(scopes);
                    try {
                        const accessToken = yield this.userAgentApplication.acquireTokenSilent(scopes);
                        return accessToken;
                    }
                    catch (error) {
                        const accessToken = yield this.userAgentApplication.acquireTokenPopup(scopes);
                        return accessToken;
                    }
                }
                catch (errorMsg) {
                    throw new Error(errorMsg);
                }
            }
        });
    }
    /**
     * @public
     * To add the scopes to the existing set of scopes
     * @param {string[]} scopes - The array of graph scope values
     * @returns Nothing
     */
    addScopes(scopes) {
        if (scopes.length === 0) {
            const error = new Error();
            error.name = "EmptyScopes";
            error.message = "Scopes array cannot be empty";
            throw error;
        }
        this.scopes = Array.from(new Set(this.scopes.concat(scopes)));
    }
    /**
     * @public
     * To clear the graph scopes
     * @returns Nothing
     */
    clearScopes() {
        this.scopes = [];
    }
}
//# sourceMappingURL=MSALAuthenticationProvider.js.map